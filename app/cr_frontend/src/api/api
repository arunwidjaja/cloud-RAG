export const fetch_db_files_metadata = async () => {
    // TODO: Make it collection specific
    try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/db_files_metadata`);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const files = await response.json();
        return files;
    } catch (error) {
        console.error('Error fetching files:', error);
        return [];
    }
}
export const fetch_uploads_metadata = async () => {
    try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/uploads_metadata`);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const files = await response.json();
        return files;
    } catch (error) {
        console.error('Error fetching uploads:', error);
        return [];
    }
}
export const start_push_to_DB = async () => {
    try {
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/initiate_push_to_db`);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        else {
            const pushed_files = await response.json();
            return pushed_files
        }
    } catch (error) {
        console.error('Error refreshing database:', error);
        return [];
    }
}
export const start_upload_deletion = async (upload_deletion_list) => {
    try {
        const hashes = upload_deletion_list.map(item => item.hash);
        const query = hashes.map(hash => `hashes=${encodeURIComponent(hash)}`).join('&');
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/delete_uploads?${query}`,{
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const deleted_uploads = await response.json();
        return deleted_uploads
    } catch (error) {
        console.error('An error occurred while deleting uploads: ', error)
    }
}
export const start_file_deletion = async (file_deletion_list) => {
    try {
        const hashes = file_deletion_list.map(item => item.hash);
        const query = hashes.map(hash => `hashes=${encodeURIComponent(hash)}`).join('&');
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/delete_files?${query}`,{
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const deleted_files = await response.json();
        return deleted_files 
    } catch (error) {
        console.error('An error while deleting files from the collection: ', error)
    }
}
export const start_file_download = async (file_download_list) => {
    if (!Array.isArray(file_download_list) || file_download_list.length === 0) {
        return 'No files were downloaded'
    }
    try {
        const hashes = file_download_list.map(item => item.hash);
        const query = hashes.map(hash => `hashes=${encodeURIComponent(hash)}`).join('&');
        const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/download_files?${query}`,{
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const downloaded_files = await response.json();
        return downloaded_files
    } catch (error) {
        console.error('An error occurred while download files: ', error)
    }
}
// export {
//     fetch_db_files_metadata,
//     fetch_uploads_metadata,
//     start_push_to_DB,
//     start_upload_deletion,
//     start_file_deletion,
//     start_file_download
// };
//